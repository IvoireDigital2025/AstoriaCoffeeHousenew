Here is the cleaned-up, ready-to-copy version of your server code.
All session settings are correct for Render (secure cookies, sameSite: "none", trust proxy, etc).
This version fixes all merge markers and makes everything production-ready:

ts
Copy
Edit
import express, { type Request, Response, NextFunction } from "express";
import session from "express-session";
import path from "path";
import { registerRoutes } from "./routes";
import { setupVite, serveStatic, log } from "./vite";
import { pool } from "./db";
import connectPgSimple from "connect-pg-simple";

const app = express();

// Always trust proxy in production (Render needs this!)
if (process.env.NODE_ENV === "production") {
  app.set('trust proxy', 1);
}

app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// Redirect HTTP to HTTPS in production
app.use((req, res, next) => {
  if (
    process.env.NODE_ENV === "production" &&
    req.headers["x-forwarded-proto"] !== "https"
  ) {
    return res.redirect("https://" + req.headers.host + req.url);
  }
  next();
});

// Serve attached assets
app.use("/attached_assets", express.static("attached_assets"));

// Session store config
const pgSession = connectPgSimple(session);
app.use(
  session({
    store: new pgSession({
      pool: pool,
      tableName: "session",         // MUST match your DB table!
      createTableIfMissing: false,
    }),
    secret: process.env.SESSION_SECRET || "coffee-pro-secret-key-render-2025",
    resave: false,
    saveUninitialized: false,
    cookie: {
      sameSite: "none",             // ALWAYS "none" for cross-origin on Render
      secure: true,                 // ALWAYS true for HTTPS
      httpOnly: true,
      maxAge: 24 * 60 * 60 * 1000   // 24 hours
      // domain: undefined           // (do not set domain)
    },
    name: "coffee-pro-session",
    proxy: true                     // REQUIRED for secure cookies behind proxy!
  })
);

// API log middleware (leave as is)
app.use((req, res, next) => {
  const start = Date.now();
  const path = req.path;
  let capturedJsonResponse: Record<string, any> | undefined = undefined;

  const originalResJson = res.json;
  res.json = function (bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };

  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path.startsWith("/api")) {
      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }
      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "â€¦";
      }
      log(logLine);
    }
  });

  next();
});

(async () => {
  const server = await registerRoutes(app);

  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    res.status(status).json({ message });
    throw err;
  });

  // Only setup Vite in development
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }

  // Use PORT environment variable (Render) or default to 5000
  const port = parseInt(process.env.PORT || "5000");
  server.listen(
    {
      port,
      host: "0.0.0.0",
      reusePort: true,
    },
    () => {
      log(`serving on port ${port}`);
    }
  );
})();